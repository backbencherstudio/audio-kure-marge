import React, { useEffect, useState, useRef } from "react";

const SubPayment = () => {
    const [audioDuration, setAudioDuration] = useState(0);
    const [listenedTime, setListenedTime] = useState(0);
    const [isPlaying, setIsPlaying] = useState(false);
    const iframeRef = useRef(null);
    const startTimeRef = useRef(null);

    useEffect(() => {
        const loadSoundCloudWidget = () => {
            return new Promise((resolve) => {
                if (window.SC) {
                    resolve();
                } else {
                    const script = document.createElement("script");
                    script.src = "https://w.soundcloud.com/player/api.js";
                    script.onload = resolve;
                    document.body.appendChild(script);
                }
            });
        };

        const initSoundCloudPlayer = async () => {
            await loadSoundCloudWidget();
            const widget = window.SC.Widget(iframeRef.current);

            widget.bind(window.SC.Widget.Events.READY, () => {
                widget.getDuration((duration) => {
                    setAudioDuration(duration / 1000); // Convert to seconds
                });
            });

            widget.bind(window.SC.Widget.Events.PLAY, () => {
                setIsPlaying(true);
                startTimeRef.current = Date.now();
            });

            widget.bind(window.SC.Widget.Events.PAUSE, () => {
                if (isPlaying && startTimeRef.current) {
                    const endTime = Date.now();
                    const timeElapsed = (endTime - startTimeRef.current) / 1000;
                    setListenedTime(prevTime => prevTime + timeElapsed);
                    startTimeRef.current = null;
                }
                setIsPlaying(false);
            });

            widget.bind(window.SC.Widget.Events.FINISH, () => {
                if (isPlaying && startTimeRef.current) {
                    const endTime = Date.now();
                    const timeElapsed = (endTime - startTimeRef.current) / 1000;
                    setListenedTime(prevTime => prevTime + timeElapsed);
                    startTimeRef.current = null;
                }
                setIsPlaying(false);
            });

            widget.bind(window.SC.Widget.Events.SEEK, () => {
                if (startTimeRef.current) {
                    const endTime = Date.now();
                    const timeElapsed = (endTime - startTimeRef.current) / 1000;
                    setListenedTime(prevTime => prevTime + timeElapsed);
                }
                // Reset the start time to now if we're still playing
                if (isPlaying) {
                    startTimeRef.current = Date.now();
                }
            });
        };

        initSoundCloudPlayer();

        // Cleanup function
        return () => {
            if (isPlaying && startTimeRef.current) {
                const endTime = Date.now();
                const timeElapsed = (endTime - startTimeRef.current) / 1000;
                setListenedTime(prevTime => prevTime + timeElapsed);
            }
        };
    }, [isPlaying]);

    const formatTime = (timeInSeconds) => {
        const minutes = Math.floor(timeInSeconds / 60);
        const seconds = Math.floor(timeInSeconds % 60);
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    };

    return (
        <div className="p-4">
            <h2 className="text-xl font-bold mb-4 text-black">Choose Your Plan</h2>

            <iframe
                ref={iframeRef}
                width="100%"
                height="100"
                scrolling="no"
                frameBorder="no"
                allow="autoplay"
                src="https://w.soundcloud.com/player/?url=https%3A//soundcloud.com/fozle-rabbi-shuvo/audio11&color=%23ff5500&inverse=false&auto_play=true&show_user=false&show_reposts=false&show_comments=false&visual=false"
            ></iframe>



            <div className="mt-4 space-y-2">
                <p className="text-black">
                    Audio Length: {audioDuration ? formatTime(audioDuration) : "Loading..."}
                </p>
                <p className="text-black">
                    Total Listened Time: {formatTime(listenedTime)}
                </p>
                <p className="text-black">
                    Status: {isPlaying ? "Playing" : "Paused"}
                </p>
            </div>
        </div>
    );
};

export default SubPayment;